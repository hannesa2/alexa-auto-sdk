/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permission and limitations under the License.
 */

#ifndef AACE_LOCAL_VOICE_CONTROL_CONFIGURATION_H
#define AACE_LOCAL_VOICE_CONTROL_CONFIGURATION_H

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <memory>

#include "AACE/Core/EngineConfiguration.h"

/** @file */

namespace aace {
namespace localVoiceControl {
namespace config {

/**
 * A factory interface for creating Alexa configuration objects
 */
class  LocalVoiceControlConfiguration {
public:
    /**
     * Socket permission enum
     */
    enum SocketPermission {
        OWNER,
        GROUP,
        ALL
    };

public:

    /**
     * Factory method used to programmatically generate an engine configuration for local voice control
     * using a file path. The contents of the file referenced by the path should match the configuration
     * file used to launch the local Alexa endpoint. The developer must ensure that the application
     * has permissions to read the file.
     *
     * The data generated is equivalent to providing the following JSON values in a configuration file:
     *
     * @code{.json}
     * {
     *   "lvc" :
     *    {
     *       "configFilePath" : "<PATH TO THE CONFIGURATION FILE>"
     *    }
     * }
     * @endcode
     *
     * @param configFilePath Path to the configuration file where execution controller and platform services
     *                          socket directories are defined.
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createFileConfig(const std::string& configFilePath);

   /**
     * Factory method used to programmatically generate an engine configuration for Local Voice Control.
     * This method allows passing values for the specified parameters directly. The data generated by this method
     * is equivalent to providing the following JSON values in a configuration file:
     *
     * @code{.json}
     * {
     *   "lvc":
     *   {
     *     "controllerSocketDirectory"    : "<SOCKET_DIRECTORY_PATH_FOR_EXECUTION_CONTROLLER>",
     *     "controllerSocketPermissions"  : "<SOCKET_PERMISSION>",
     *     "platformSocketDirectory"      : "<SOCKET_DIRECTORY_PATH_FOR_PLATFORM_SERVICES>",
     *     "platformSocketPermissions"    : "<SOCKET_PERMISSION>",
     *     "address"                      : "<LOCAL_ALEXA_ENDPOINT_ADDRESS>",
     *     "messageRouterSocketDirectory" : "<SOCKET_DIRECTORY_PATH_FOR_MESSAGE_ROUTER>"
     *   }
     * }
     * @endcode
     *
     * @param [in] controllerSocketDirectory    The directory path where file socket will be created for execution controller.
     * @param [in] controllerSocketPermissions  The permissions for the file socket.
     *             Supported values:
     *                 @c OWNER - sets / checks the permission for owner only (600 for socket, 500 for directory)
     *                 @c GROUP - sets / checks the permission for owner and group (660 for socket, 550 for directory)
     *                 @c ALL - sets / checks the permission for owner, group, and other (666 for socket, 555 for directory)
     * @param [in] platformSocketDirectory      The directory path where file socket will be created for platform services.
     * @param [in] platformSocketPermissions    The permissions for the file socket.
     *             Supported values:
     *                 @c OWNER - sets / checks the permission for owner only (600 for socket, 500 for directory)
     *                 @c GROUP - sets / checks the permission for owner and group (660 for socket, 550 for directory)
     *                 @c ALL - sets / checks the permission for owner, group, and other (666 for socket, 555 for directory)
     * @param [in] address                      The IP address of the local Alexa endpoint.
     * @param [in] messageRouterSocketDirectory The directory path to the socket file for hybrid message router and local Alexa endpoint connection
     */
    static std::shared_ptr<aace::core::config::EngineConfiguration> createIPCConfig(
        const std::string& controllerSocketDirectory, SocketPermission controllerSocketPermissions, 
        const std::string& platformSocketDirectory,   SocketPermission platformSocketPermissions,
        const std::string& address, const std::string& messageRouterSocketDirectory);
    
private:

    /**
     * Converts enum value to its string representation.
     * @param permission The permission value to convert.
     */
    static std::string permissionToString(SocketPermission permission);
};

} // aace::localVoiceControl::config
} // aace::localVoiceControl
} // aace

#endif // AACE_LOCAL_VOICE_CONTROL_CONFIGURATION_H
